@page "/"
@using player_tracker.Classes
@using BaseballSharp

<style>
    input[type=checkbox]:checked + label {
        color: red;
        text-decoration: line-through;
    }
</style>

<label class="h3">The pitcher is on pace for @Decimal.Round(on_pace_for, 2) pitches per inning. Assuming a target of @target_pitches total pitches thrown, the pitcher will last @Decimal.Round(pulled_innings, 2) more innings.</label>
<br />
<div class="alert alert-danger" role="alert" style="display:@error_display;">
    @error_message
</div>

<form id="frm_main">
    <table class="table">
        <thead>
            <tr>
                <th>Pitches</th>
                <th>Innings</th>
                <th>Thirds</th>
                <th>Target Pitches</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><input type="text" id="tb_pitches" @bind="pitches" /></td>
                <td><input type="text" id="tb_innings" @bind="innings" /></td>
                <td><input type="text" id="tb_thirds" @bind="thirds" /></td>
                <td><input type="text" id="tb_target" @bind="target_pitches" /></td>
            </tr>
        </tbody>
    </table>
    <input type="button" form="frm_main" @onclick="calc" class="btn btn-primary" value="Calc" />
</form>
<hr />
<input type="button" @onclick="fetch" class="btn btn-primary" value="Load Pitchers" style="display:@disp" />

<div class="container-fluid">
    <div class="row">
        <div class="col-md-6">
        </div>
    </div>
    <div class="row">
        <h3>Relievers</h3>
    </div>
    <div class="row">
        @foreach (var item in relievers)
        {
            <div class="col-md-6">
                <input type="checkbox" id="@item.Name"> <label for="@item.Name">@item.Name</label>
            </div>

        }
    </div>
    <div class="row">
        <h3>Starters</h3>
    </div>
    <div class="row">
        @foreach (var item in starters)
        {
            <div class="col-md-6">
                <input type="checkbox" id="@item.Name"> <label for="@item.Name">@item.Name</label>
            </div>
        }
    </div>
</div>

@code {

    private async Task fetch()
    {

        var rel = await BaseballSharp.Api.DepthChart((int)BaseballSharp.eTeamId.Dodgers);

        foreach (var player in rel.Where(e => e.PositionName == "Closer" || e.PositionName == "Pitcher"))
        {
            relievers.Add(new PitcherModel()
            {
                Name = player.PlayerFullName
            });
        }

        var star = await BaseballSharp.Api.DepthChart((int)BaseballSharp.eTeamId.Dodgers);

        foreach (var player in rel.Where(e => e.PositionName == "Starting Pitcher"))
        {
            starters.Add(new PitcherModel()
            {
                Name = player.PlayerFullName
            });
        }

        disp = "none";
    }

    private async Task getGame()
    {
        var games = await BaseballSharp.Api.Schedule(DateTime.Now);

        BaseballSharp.Models.Linescore linescore = null;

        foreach (var game in games)
        {
            if(game.HomeTeam.Contains("Dodgers") || game.AwayTeam.Contains("Dodgers"))
            {
                @*linescore = BaseballSharp.Api.LineScore(game.id)*@
            }
        }


    }

    private async Task calc()
    {
        if ((innings + thirds / 3M) == 0M)
        {
            error_message = "Cannot divide by zero.";
            error_display = "block";
            return;
        }
        else
        {
            error_display = "none";
        }

        on_pace_for = pitches / (innings + thirds / 3M);

        if (on_pace_for == 0)
        {
            on_pace_for = 0;
            pulled_innings = 0;
            return;
        }

        pulled_innings = ((decimal)target_pitches / on_pace_for) - (innings + thirds / 3M);
    }

    private decimal pitches { get; set; }
    private decimal innings { get; set; }
    private decimal thirds { get; set; }
    private int target_pitches { get; set; } = 100;

    private decimal on_pace_for { get; set; } = 0;
    private decimal pulled_innings { get; set; } = 0;

    private List<PitcherModel> relievers { get; set; } = new List<PitcherModel>();

    private List<PitcherModel> starters { get; set; } = new List<PitcherModel>();

    private string disp { get; set; } = "inline";

    private string error_message { get; set; } = "";

    private string error_display { get; set; } = "none";
}